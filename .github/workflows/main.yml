name: Build, Test, Push, and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-test-argi-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- CT 阶段：验证代码质量（只测试，不打包）---
      ## 2. 设置 JDK 1.8 环境
      - name: Set up JDK 1.8  
        uses: actions/setup-java@v4  
        with:  
          java-version: '8'  
          distribution: 'temurin'

      ## 3. 运行后端测试
      - name: Test Backend  
        working-directory: ./backend  
        run: mvn -B test --file pom.xml

      # 4. 设置 Node.js 环境
      - name: Set up Node.js 20  
        uses: actions/setup-node@v4  
        with:  
          node-version: '20'

      - name: Install pnpm  
        uses: pnpm/action-setup@v3  
        with:  
          version: 8  

      # 5. 安装前端依赖并运行测试
      - name: Install Frontend Dependencies & Test 
        working-directory: ./frontend  
        run: |  
          pnpm install  
          # 如果有测试命令，在这里运行，例如：
          # pnpm test

      # 6. 登录到 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  
          password: ${{ secrets.DOCKERHUB_TOKEN }}  

      # 7. 构建并推送 Docker 镜像
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .  
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/airline-order-course:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/airline-order-course:${{ github.sha }}

      # 8. 部署到 EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }} 
          key: ${{ secrets.SSH_PRIVATE_KEY }} 
          script: |
            cd ~/airline-cicd
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker image prune -f
