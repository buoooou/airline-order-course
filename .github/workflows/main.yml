name: 航空订单系统 - CI/CD 部署流水线

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

jobs:
  # 第一阶段：代码质量检查和测试
  test:
    name: 代码测试和质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Java 环境
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 设置 Node.js 环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 缓存 Maven 依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 前端依赖安装和测试
      working-directory: ./frontend
      run: |
        npm ci 
        npm run build
        
    - name: 后端测试
      working-directory: ./backend
      run: |
        mvn clean test
        
  # 第二阶段：构建和推送Docker镜像
  build-and-push:
    name: 构建并推送Docker镜像
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    # 构建并推送前后端合并的镜像
    - name: 构建并推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64  # 多架构支持
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
        cache-from: type=gha  # 缓存加速构建
        cache-to: type=gha,mode=max          

    - name: 镜像安全扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 上传安全扫描结果
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 第三阶段：部署到AWS EC2
  deploy:
    name: 部署到 AWS EC2
    needs: build-and-push
    runs-on: ubuntu-latest    
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到 EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "开始部署航空订单系统..."

          # 导出环境变量（供docker-compose.yml使用）
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}

          # 验证变量是否被导出（仅检查是否存在，不打印值）
          if [ -z "$DOCKERHUB_USERNAME" ]; then
            echo "Error: DOCKERHUB_USERNAME 未导出"
            exit 1
          else
            echo "DOCKERHUB_USERNAME 已成功导出"
          fi
          
          if [ -z "$DOCKER_IMAGE_NAME" ]; then
            echo "Error: DOCKER_IMAGE_NAME 未导出"
            exit 1
          else
            echo "DOCKER_IMAGE_NAME 已成功导出"
          fi
          
          echo "当前工作目录: $(pwd)"  # 新增：打印当前目录
          echo "查找 docker-compose.yml 文件..."
          find . -name "docker-compose.yml"  # 搜索当前目录及子目录

          # 创建部署目录
          mkdir -p ~/airline-deployment
          cp ./docker-compose.yml ~/airline-deployment/
          cd ~/airline-deployment
          
          # 停止现有服务
          if [ -f docker-compose.yml ]; then
            echo "停止现有服务..."
            docker-compose down
          fi
          
          # 拉取最新镜像
          echo "拉取最新Docker镜像..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

          # 启动服务
          echo "启动服务..."
          docker-compose up -d --remove-orphans
          
          # 等待服务启动
          echo "等待服务启动..."
          sleep 30
          
          # 健康检查
          echo "执行健康检查..."
          for i in {1..10}; do
            if curl -f http://localhost:8080/actuator/health; then
              echo "服务启动成功！"
              break
            else
              echo "等待服务启动... ($i/10)"
              sleep 10
            fi
          done
          
          # 清理旧镜像
          echo "清理旧Docker镜像..."
          docker image prune -f
          
          echo "部署完成！"

  # 第四阶段：部署后测试
  post-deploy-test:
    name: 部署后集成测试
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 等待服务完全启动
      run: sleep 60

    - name: 健康检查测试
      run: |
        echo "执行健康检查..."
        curl -f http://${{ secrets.EC2_HOST }}:8080/actuator/health      

    - name: API文档测试
      run: |
        echo "API文档测试检查..."
        curl -f http://${{ secrets.EC2_HOST }}:8080/swagger-ui/index.html
        
    - name: API接口测试
      run: |
        echo "测试主要API接口..."
        # 测试登录接口
        curl -X POST http://${{ secrets.EC2_HOST }}:8080/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username":"user","password":"password"}' || true
        
    - name: 前端页面测试
      run: |
        echo "测试前端页面..."
        curl -f http://${{ secrets.EC2_HOST }}:8080/ | grep -q "航空订单" || true
        
