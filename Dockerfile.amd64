# 多阶段构建 - 前端构建阶段
FROM --platform=linux/amd64 node:20-alpine AS frontend-builder
WORKDIR /app

# 安装git（某些npm包可能需要）
RUN apk add --no-cache git

# 复制前端依赖文件
COPY frontend/package*.json ./
COPY frontend/angular.json ./
COPY frontend/tsconfig*.json ./

# 安装依赖
RUN npm install --legacy-peer-deps

# 复制前端源码
COPY frontend/ ./

# 构建前端应用
RUN npm run build -- --configuration=production --ssr=false

# 多阶段构建 - 后端构建阶段
FROM --platform=linux/amd64 maven:3.8.5-openjdk-11 AS backend-builder
WORKDIR /app

# 复制Maven配置文件
COPY backend/pom.xml .

# 复制后端源码
COPY backend/src ./src

# 创建静态资源目录
RUN mkdir -p ./src/main/resources/static

# 复制前端构建产物到后端静态资源目录
COPY --from=frontend-builder /app/dist/frontend/browser/* ./src/main/resources/static/

# 构建后端应用
RUN mvn clean package -DskipTests -B --fail-never || \
    mvn clean package -DskipTests -B -U

# 最终运行阶段
FROM --platform=linux/amd64 openjdk:11-jre-slim

# 安装必要的工具和设置时区
RUN apt-get update && apt-get install -y curl tzdata && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata && \
    rm -rf /var/lib/apt/lists/*

# 创建应用用户
RUN groupadd -g 1001 appgroup && \
    useradd -u 1001 -g appgroup -m appuser

# 设置工作目录
WORKDIR /app

# 复制JAR文件
COPY --from=backend-builder /app/target/*.jar app.jar

# 设置文件权限
RUN chown -R appuser:appgroup /app

# 切换到应用用户
USER appuser

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# 启动应用
ENTRYPOINT ["java", \
    "-Djava.security.egd=file:/dev/./urandom", \
    "-Dspring.profiles.active=prod", \
    "-Xmx512m", \
    "-Xms256m", \
    "-jar", \
    "app.jar"]
