name: CI/CD for Angular and Spring Boot

on:
  push:
    branches:
      - main  # 触发部署的分支

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. 设置 Node.js 环境（用于 Angular 构建）
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # 根据你的 Angular 项目需求调整版本

      # 3. 安装 Angular 依赖并构建
      - name: Build Angular App
        run: |
          cd angular-app
          npm install
          npm run build -- --prod  # 使用 Angular 的生产构建命令

      # 4. 设置 Java 环境（用于 Spring Boot 构建）
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # 根据你的 Spring Boot 项目需求调整版本
          distribution: 'adopt'

      # 5. 安装 Maven 并构建 Spring Boot 项目
      - name: Build Spring Boot App
        run: |
          cd springboot-app
          ./mvnw clean package  # 如果使用 Maven
          # 或使用 Gradle：./gradlew build

      # 6. 部署到 EC2 实例
      - name: Deploy to EC2
        uses: easingthemes/ssh-deploy@v2.0.7
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.AWS_EC2_HOST }}
          REMOTE_USER: ${{ secrets.AWS_EC2_USER }}
          TARGET: ${{ secrets.DEPLOY_PATH }}
          ARGS: "-avz --delete"  # 同步文件并删除目标目录多余文件
          # 指定要上传的文件路径
          SOURCE: |
            angular-app/dist/your-angular-project/  # 替换为 Angular 构建输出目录
            springboot-app/target/your-springboot-app.jar  # 替换为 Spring Boot 构建输出的 JAR 文件

      # 7. 在 EC2 上执行部署脚本（可选）
      - name: Run Deployment Script on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 停止旧的 Spring Boot 服务
            systemctl stop springboot-app.service || true

            # 替换前端文件（假设 Nginx 配置指向 /var/www/html）
            cp -r ${DEPLOY_PATH}/angular-app/dist/* /var/www/html/

            # 启动 Spring Boot 应用
            nohup java -jar ${DEPLOY_PATH}/springboot-app/your-springboot-app.jar > /dev/null 2>&1 &
            # 或使用 systemd 管理服务
            # systemctl start springboot-app.service
