# .github/workflows/main.yml

name: Build, Test, Push, and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-test-and-deploy:
    runs-on: Ubuntu-Latest

    steps:
      # 1. 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4

      #--- CI 阶段：验证代码质量（只测试，不打包）---
      # 2. 设置 JDK 1.8 环境
      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      # 3.（推荐）运行后端测试
      - name: Test Backend
        working-directory: /backend
        #使用 mvn test 来运行测试。如果测试失败，流水线会在此中止。
        run: mvn -B test --file pom.xml

      # 4.设置 Node.js 环境
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with: 
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      # 5.（推荐）安装前端依赖并运行测试
      - name: Install Frontend Dependencies & Test
        working-directory: ./frontend
        run: 1
          pnpm install
          # 如果有测试命令，在这里运行，例如：pnpm test
          # pnpm test

      #---CD 阶段：构建镜像并部署⋯--
      # 只有当上面的测试全部通过后，才会执行到这里

      # 6. 登泉到 Docker Hub
      - name: Login to Docker Hub
        uses: docker/Login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 7. 构建并推送 Docker镜像
      # 这一步会使用你的 Dockerfile 从源码开始完整构建，这是我们期望的
      - name: Build and Push Docker Image 
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/airline-order-frontend-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/airline-order-frontend-backend:${{ github.sha }}

      # 8. 部署到 EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/airline-cicd
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker image prune -f